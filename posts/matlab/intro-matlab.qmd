---
title: "Introduction to MATLAB"
subtitle: "PSYC480"
author: "Usman Afzali"
institute: "University of Canterbury"
date: 2024-05-01
format: 
  revealjs:
    theme: simple
    highlight-style: github
    slide-number: c/t
categories: [EEG, EEGLAB, MATLAB]
---

# Outline {background-color="orange"}

## What's on today? {background-color="#346bc8"}

-   Introducing the PSYC480 Blog
-   What is MATLAB?
-   User interface
-   Getting started
-   Basic operations
-   Working with imported data
-   What's next?

## Resources {background-color="#346bc8"}

-   [PSYC480 Blog](https://usman-afzali.github.io/psyc480-2k24/)
-   [MATLAB for Neuroscience](https://research.ebsco.com/c/g6lqvo/search/details/yksmkozjxf?q=matlab%20for%20neuroscience)
-   [Get Started with MATLAB](https://au.mathworks.com/help/matlab/getting-started-with-matlab.html)

# [PSYC480 Blog](https://usman-afzali.github.io/psyc480-2k24/) {background-color="orange"}

# MATLAB {background-color="orange"}

## Introduction {background-color="#346bc8"}

MATLAB, short for "MATrix LABoratory," is a high-level programming language and interactive environment primarily designed for numerical computation, data analysis, and visualization. It provides a comprehensive set of tools and functions for various domains, including mathematics, engineering, and science. MATLAB allows users to perform matrix manipulations, implement algorithms, create graphical user interfaces (GUIs), and interface with other programming languages and software packages. It is widely used in academia, industry, and research for tasks such as signal processing, image processing, control systems design, and machine learning. (from ChatGPT)

## Uses (from ChatGPT) {background-color="#346bc8"}

::: columns
::: {.column width="50%"}
1.  Numerical computation
2.  Data analysis and visualization
3.  Signal processing
4.  Image processing and computer vision
5.  Control systems design and analysis

:::

::: {.column width="50%"}
6.  Machine learning and deep learning
7.  Optimization and mathematical modeling
8.  Simulation of dynamic systems
9.  Financial modeling and analysis
10. Computational biology and bioinformatics
:::
:::

## Uses continued (from ChatGPT) {background-color="#346bc8"}

::: columns
::: {.column width="50%"}
11.  Computational fluid dynamics (CFD)
12.  Geospatial analysis and mapping
13.  Time-series analysis and forecasting
14.  Statistical analysis and hypothesis testing
15.  Graph theory and network analysis
:::

::: {.column width="50%"}

16.  Robotics and autonomous systems
17.  Audio processing and speech recognition
18.  Cryptography and security analysis
19.  Education and teaching (simulations, course materials)
20. Application development (applications, GUIs)
:::
:::

## User Interface {background-color="#346bc8"}

![MATLAB user interface](matlab.png)

## Toolboxes and Apps {background-color="#346bc8"}



-   A MATLAB toolbox
-   Used for processing and analysing EEG, MEG and other electrophysiological signals.
-   It has a GUI

## Processing and analysing EEG data {background-color="#346bc8"}

-   MATLAB command line
-   The standalone EEGLab software
-   Use EEGLab in association with MATLAB

# Demonstration {background-color="orange"}

## Pipeline {background-color="#346bc8"}

![](/figs/pipeline.png)

[EEGLab Preprocessing - Delorme](https://youtu.be/gEk33jWB0MY)

## How to process using EEGLab {background-color="#346bc8"}

-   Use the available dataset from Learn `Lab 1 demo`.
-   Note "Channels per frame, Frames per epoch, epoch, events, sampling rate, reference and other attributes.

## How to process using EEGLab {background-color="#346bc8"}

-   Epoch: A procedure in which specific time-windows are extracted from the continuous EEG signal. These time windows are called “epochs”, and usually are time-locked with respect an event e.g. a visual stimulus. ![](/figs/Figure%209.png)

## Attributes contd... {background-color="#346bc8"}

-   Event: a visual stimuli or a task
-   Sampling rate (Hz): the number of samples (of electrical activity) recorded per second
-   Frames: Frames in EEGLAB are the same as samples (so if you sampled at 500 Hz your data will have 500 frames each second)
-   Referencing: EEG recordings measure differences in electrical potentials between two points (Voltages). This means the signal displayed at any channel is in fact the difference in electrical potential to some other recording site (or reference).

## Visualising EEG data {background-color="#346bc8"}

-   Use `Plot -> Channel data (scroll)`.

![](/figs/eeg1.png)

## Referencing {background-color="#346bc8"}

::: incremental
-   Why do we reference?
:::

## Referencing to M1 and M2 {background-color="#346bc8"}

::: incremental
-   Use `Tools -> re-reference the data`.
-   Compare the attributes to the original dataset. Is there any discrepancy? If yes, why?
-   If you haven't picked answer to "why" yet, plot the data again and observe closely.
:::

## Filtering {background-color="#346bc8"}

::: incremental
-   Why do we filter data?
-   Many sources of noise, such as the 60Hz line noise, consist mainly of very high frequencies or very low frequencies, whereas most of the useful information in an EEG or ERP waveform is at intermediate frequencies (between approximately 0.1Hz and 50Hz).
:::

## Filtering contd.... {background-color="#346bc8"}

::: incremental
-   Consequently, the noise can often be reduced with minimal impact on the EEG/ERP waveform by filtering out the very low and/or very high frequencies.

-   Delorme recommends filtering at 0.5.

-   Use `Tools -> Filter data -> basic FIR Filter`. Type 0.5 in the `Lower edge`

-   DC offset: <https://relaytraining.com/what-is-dc-offset-ask-chris/>
:::

## Visaul inspection.... {background-color="#346bc8"}

-   From `Edit`, select `channel locations`
-   Plot channels as `2-D`

## Removing unwanted channels {background-color="#346bc8"}

Use `Edit -> Select data`. Select the `Channel range` that you want to remove.

## Examining raw data {background-color="#346bc8"}

::: {layout="[[60, 40], [100]]"}
-   To identify artefacts
-   And to reject them
-   Use `Tools -> Inspect/reject data by eye.` Use your mouse to highlight the part you want to reject, and click the `REJECT` button.

![](/figs/messydata.png)
:::

## Automatic artefact rejection {background-color="#346bc8"}

Use `Tools -> Reject data using Clean Rawdata and ASR.` Generally, we'd use all `default choices` - Consequently, the noise can often be reduced with minimal impact on the EEG/ERP waveform by filtering out the very low and/or very high frequencies.

-   Delorme's [video](https://www.youtube.com/watch?v=5BTT-L2Ab04&list=PLXc9qfVbMMN1ZS3sU2xT2hhfB5PAmuNae&index=6) and another [video](https://www.youtube.com/watch?v=ZvbRiX84mgc&list=PLXc9qfVbMMN1ZS3sU2xT2hhfB5PAmuNae&index=7) on these.

# Exercise {background-color="orange"}

## To submit {background-color="#346bc8"}

-   Use the the `Lab 1 exercise` dataset on Learn.
-   Read it in to the EEGLab
-   Report all attributes
-   Insert a screenshot of the attributes
-   Plot data using the scroll option
-   Insert a screenshot
-   Report your observation: do the data look similar to `demonstration`? What do you see as a potential difference?

## To submit continued {background-color="#346bc8"}

-   Plot channels as `2-D`
-   Do you see any anomaly? Comment!
-   Conduct automatic rejection with ASR.
-   Report your findings in comparison with before artefact rejection.
-   Submit this as a pdf on Learn.

# The END {background-color="orange"}
